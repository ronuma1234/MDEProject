/**
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.trader.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.trader.trader.Execute;
import uk.ac.kcl.inf.trader.trader.TraderPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Execute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ExecuteImpl#getExecuteCommand <em>Execute Command</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExecuteImpl extends StatementImpl implements Execute
{
  /**
   * The default value of the '{@link #getExecuteCommand() <em>Execute Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecuteCommand()
   * @generated
   * @ordered
   */
  protected static final String EXECUTE_COMMAND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExecuteCommand() <em>Execute Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecuteCommand()
   * @generated
   * @ordered
   */
  protected String executeCommand = EXECUTE_COMMAND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExecuteImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraderPackage.Literals.EXECUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExecuteCommand()
  {
    return executeCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExecuteCommand(String newExecuteCommand)
  {
    String oldExecuteCommand = executeCommand;
    executeCommand = newExecuteCommand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.EXECUTE__EXECUTE_COMMAND, oldExecuteCommand, executeCommand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraderPackage.EXECUTE__EXECUTE_COMMAND:
        return getExecuteCommand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraderPackage.EXECUTE__EXECUTE_COMMAND:
        setExecuteCommand((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.EXECUTE__EXECUTE_COMMAND:
        setExecuteCommand(EXECUTE_COMMAND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.EXECUTE__EXECUTE_COMMAND:
        return EXECUTE_COMMAND_EDEFAULT == null ? executeCommand != null : !EXECUTE_COMMAND_EDEFAULT.equals(executeCommand);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (executeCommand: ");
    result.append(executeCommand);
    result.append(')');
    return result.toString();
  }

} //ExecuteImpl
