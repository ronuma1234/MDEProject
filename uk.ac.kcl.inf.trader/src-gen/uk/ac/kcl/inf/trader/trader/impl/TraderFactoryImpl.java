/**
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.trader.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.trader.trader.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TraderFactoryImpl extends EFactoryImpl implements TraderFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TraderFactory init()
  {
    try
    {
      TraderFactory theTraderFactory = (TraderFactory)EPackage.Registry.INSTANCE.getEFactory(TraderPackage.eNS_URI);
      if (theTraderFactory != null)
      {
        return theTraderFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TraderFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TraderFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TraderPackage.TRADER_PROGRAM: return createTraderProgram();
      case TraderPackage.STATEMENT: return createStatement();
      case TraderPackage.CONNECT: return createConnect();
      case TraderPackage.CONNECT_PARAMETERS: return createConnectParameters();
      case TraderPackage.TRADING_BOT: return createTradingBot();
      case TraderPackage.LIST_BOTS: return createListBots();
      case TraderPackage.EXECUTE: return createExecute();
      case TraderPackage.STOP: return createStop();
      case TraderPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case TraderPackage.INT_VARIABLE_DECLARATION: return createIntVariableDeclaration();
      case TraderPackage.STRING_VARIABLE_DECLARATION: return createStringVariableDeclaration();
      case TraderPackage.REAL_VARIABLE_DECLARATION: return createRealVariableDeclaration();
      case TraderPackage.LOOP_STATEMENT: return createLoopStatement();
      case TraderPackage.INT_EXPRESSION: return createIntExpression();
      case TraderPackage.INT_LITERAL: return createIntLiteral();
      case TraderPackage.INT_VAR_EXPRESSION: return createIntVarExpression();
      case TraderPackage.ACTION: return createAction();
      case TraderPackage.BUY: return createBuy();
      case TraderPackage.SELL: return createSell();
      case TraderPackage.ADDITION: return createAddition();
      case TraderPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TraderPackage.STRATEGY_DEF:
        return createStrategyDefFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TraderPackage.STRATEGY_DEF:
        return convertStrategyDefToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraderProgram createTraderProgram()
  {
    TraderProgramImpl traderProgram = new TraderProgramImpl();
    return traderProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connect createConnect()
  {
    ConnectImpl connect = new ConnectImpl();
    return connect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConnectParameters createConnectParameters()
  {
    ConnectParametersImpl connectParameters = new ConnectParametersImpl();
    return connectParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TradingBot createTradingBot()
  {
    TradingBotImpl tradingBot = new TradingBotImpl();
    return tradingBot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListBots createListBots()
  {
    ListBotsImpl listBots = new ListBotsImpl();
    return listBots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Execute createExecute()
  {
    ExecuteImpl execute = new ExecuteImpl();
    return execute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stop createStop()
  {
    StopImpl stop = new StopImpl();
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntVariableDeclaration createIntVariableDeclaration()
  {
    IntVariableDeclarationImpl intVariableDeclaration = new IntVariableDeclarationImpl();
    return intVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringVariableDeclaration createStringVariableDeclaration()
  {
    StringVariableDeclarationImpl stringVariableDeclaration = new StringVariableDeclarationImpl();
    return stringVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealVariableDeclaration createRealVariableDeclaration()
  {
    RealVariableDeclarationImpl realVariableDeclaration = new RealVariableDeclarationImpl();
    return realVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntExpression createIntExpression()
  {
    IntExpressionImpl intExpression = new IntExpressionImpl();
    return intExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntVarExpression createIntVarExpression()
  {
    IntVarExpressionImpl intVarExpression = new IntVarExpressionImpl();
    return intVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Buy createBuy()
  {
    BuyImpl buy = new BuyImpl();
    return buy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sell createSell()
  {
    SellImpl sell = new SellImpl();
    return sell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StrategyDef createStrategyDefFromString(EDataType eDataType, String initialValue)
  {
    StrategyDef result = StrategyDef.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStrategyDefToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraderPackage getTraderPackage()
  {
    return (TraderPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TraderPackage getPackage()
  {
    return TraderPackage.eINSTANCE;
  }

} //TraderFactoryImpl
