/**
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.trader.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.trader.trader.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TraderFactoryImpl extends EFactoryImpl implements TraderFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TraderFactory init()
  {
    try
    {
      TraderFactory theTraderFactory = (TraderFactory)EPackage.Registry.INSTANCE.getEFactory(TraderPackage.eNS_URI);
      if (theTraderFactory != null)
      {
        return theTraderFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TraderFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TraderFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TraderPackage.TRADER_PROGRAM: return createTraderProgram();
      case TraderPackage.STATEMENT: return createStatement();
      case TraderPackage.CONNECT_STATEMENT: return createConnectStatement();
      case TraderPackage.CREATE_BOT_STATEMENT: return createCreateBotStatement();
      case TraderPackage.LIST_BOTS_STATEMENT: return createListBotsStatement();
      case TraderPackage.EXECUTE_BOTS_STATEMENT: return createExecuteBotsStatement();
      case TraderPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case TraderPackage.STRING_VALUE: return createStringValue();
      case TraderPackage.REAL_VALUE: return createRealValue();
      case TraderPackage.INT_VALUE: return createIntValue();
      case TraderPackage.LOOP_STATEMENT: return createLoopStatement();
      case TraderPackage.EXPRESSION: return createExpression();
      case TraderPackage.NUM_VAR_EXPRESSION: return createNumVarExpression();
      case TraderPackage.STRING_VAR_EXPRESSION: return createStringVarExpression();
      case TraderPackage.ADDITION: return createAddition();
      case TraderPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TraderPackage.STRATEGY_DEF:
        return createStrategyDefFromString(eDataType, initialValue);
      case TraderPackage.TIME_FRAME_DEF:
        return createTimeFrameDefFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TraderPackage.STRATEGY_DEF:
        return convertStrategyDefToString(eDataType, instanceValue);
      case TraderPackage.TIME_FRAME_DEF:
        return convertTimeFrameDefToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraderProgram createTraderProgram()
  {
    TraderProgramImpl traderProgram = new TraderProgramImpl();
    return traderProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConnectStatement createConnectStatement()
  {
    ConnectStatementImpl connectStatement = new ConnectStatementImpl();
    return connectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateBotStatement createCreateBotStatement()
  {
    CreateBotStatementImpl createBotStatement = new CreateBotStatementImpl();
    return createBotStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListBotsStatement createListBotsStatement()
  {
    ListBotsStatementImpl listBotsStatement = new ListBotsStatementImpl();
    return listBotsStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecuteBotsStatement createExecuteBotsStatement()
  {
    ExecuteBotsStatementImpl executeBotsStatement = new ExecuteBotsStatementImpl();
    return executeBotsStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringValue createStringValue()
  {
    StringValueImpl stringValue = new StringValueImpl();
    return stringValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealValue createRealValue()
  {
    RealValueImpl realValue = new RealValueImpl();
    return realValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntValue createIntValue()
  {
    IntValueImpl intValue = new IntValueImpl();
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumVarExpression createNumVarExpression()
  {
    NumVarExpressionImpl numVarExpression = new NumVarExpressionImpl();
    return numVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringVarExpression createStringVarExpression()
  {
    StringVarExpressionImpl stringVarExpression = new StringVarExpressionImpl();
    return stringVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StrategyDef createStrategyDefFromString(EDataType eDataType, String initialValue)
  {
    StrategyDef result = StrategyDef.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStrategyDefToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeFrameDef createTimeFrameDefFromString(EDataType eDataType, String initialValue)
  {
    TimeFrameDef result = TimeFrameDef.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimeFrameDefToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraderPackage getTraderPackage()
  {
    return (TraderPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TraderPackage getPackage()
  {
    return TraderPackage.eINSTANCE;
  }

} //TraderFactoryImpl
