/**
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.trader.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.trader.trader.ConnectStatement;
import uk.ac.kcl.inf.trader.trader.Expression;
import uk.ac.kcl.inf.trader.trader.TimeFrameDef;
import uk.ac.kcl.inf.trader.trader.TraderPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connect Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getTickerName <em>Ticker Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getBrokerName <em>Broker Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getUsername <em>Username</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getPassword <em>Password</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getTimeframe <em>Timeframe</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectStatementImpl extends StatementImpl implements ConnectStatement
{
  /**
   * The cached value of the '{@link #getTickerName() <em>Ticker Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTickerName()
   * @generated
   * @ordered
   */
  protected Expression tickerName;

  /**
   * The cached value of the '{@link #getBrokerName() <em>Broker Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrokerName()
   * @generated
   * @ordered
   */
  protected Expression brokerName;

  /**
   * The cached value of the '{@link #getUsername() <em>Username</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsername()
   * @generated
   * @ordered
   */
  protected Expression username;

  /**
   * The cached value of the '{@link #getPassword() <em>Password</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPassword()
   * @generated
   * @ordered
   */
  protected Expression password;

  /**
   * The default value of the '{@link #getTimeframe() <em>Timeframe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeframe()
   * @generated
   * @ordered
   */
  protected static final TimeFrameDef TIMEFRAME_EDEFAULT = TimeFrameDef.M1;

  /**
   * The cached value of the '{@link #getTimeframe() <em>Timeframe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeframe()
   * @generated
   * @ordered
   */
  protected TimeFrameDef timeframe = TIMEFRAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraderPackage.Literals.CONNECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTickerName()
  {
    return tickerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTickerName(Expression newTickerName, NotificationChain msgs)
  {
    Expression oldTickerName = tickerName;
    tickerName = newTickerName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__TICKER_NAME, oldTickerName, newTickerName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTickerName(Expression newTickerName)
  {
    if (newTickerName != tickerName)
    {
      NotificationChain msgs = null;
      if (tickerName != null)
        msgs = ((InternalEObject)tickerName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__TICKER_NAME, null, msgs);
      if (newTickerName != null)
        msgs = ((InternalEObject)newTickerName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__TICKER_NAME, null, msgs);
      msgs = basicSetTickerName(newTickerName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__TICKER_NAME, newTickerName, newTickerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getBrokerName()
  {
    return brokerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBrokerName(Expression newBrokerName, NotificationChain msgs)
  {
    Expression oldBrokerName = brokerName;
    brokerName = newBrokerName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__BROKER_NAME, oldBrokerName, newBrokerName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBrokerName(Expression newBrokerName)
  {
    if (newBrokerName != brokerName)
    {
      NotificationChain msgs = null;
      if (brokerName != null)
        msgs = ((InternalEObject)brokerName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__BROKER_NAME, null, msgs);
      if (newBrokerName != null)
        msgs = ((InternalEObject)newBrokerName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__BROKER_NAME, null, msgs);
      msgs = basicSetBrokerName(newBrokerName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__BROKER_NAME, newBrokerName, newBrokerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getUsername()
  {
    return username;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUsername(Expression newUsername, NotificationChain msgs)
  {
    Expression oldUsername = username;
    username = newUsername;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__USERNAME, oldUsername, newUsername);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUsername(Expression newUsername)
  {
    if (newUsername != username)
    {
      NotificationChain msgs = null;
      if (username != null)
        msgs = ((InternalEObject)username).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__USERNAME, null, msgs);
      if (newUsername != null)
        msgs = ((InternalEObject)newUsername).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__USERNAME, null, msgs);
      msgs = basicSetUsername(newUsername, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__USERNAME, newUsername, newUsername));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getPassword()
  {
    return password;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPassword(Expression newPassword, NotificationChain msgs)
  {
    Expression oldPassword = password;
    password = newPassword;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__PASSWORD, oldPassword, newPassword);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPassword(Expression newPassword)
  {
    if (newPassword != password)
    {
      NotificationChain msgs = null;
      if (password != null)
        msgs = ((InternalEObject)password).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__PASSWORD, null, msgs);
      if (newPassword != null)
        msgs = ((InternalEObject)newPassword).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__PASSWORD, null, msgs);
      msgs = basicSetPassword(newPassword, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__PASSWORD, newPassword, newPassword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeFrameDef getTimeframe()
  {
    return timeframe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeframe(TimeFrameDef newTimeframe)
  {
    TimeFrameDef oldTimeframe = timeframe;
    timeframe = newTimeframe == null ? TIMEFRAME_EDEFAULT : newTimeframe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__TIMEFRAME, oldTimeframe, timeframe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__TICKER_NAME:
        return basicSetTickerName(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        return basicSetBrokerName(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return basicSetUsername(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return basicSetPassword(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__TICKER_NAME:
        return getTickerName();
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        return getBrokerName();
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return getUsername();
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return getPassword();
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        return getTimeframe();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__TICKER_NAME:
        setTickerName((Expression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        setBrokerName((Expression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        setUsername((Expression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        setPassword((Expression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        setTimeframe((TimeFrameDef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__TICKER_NAME:
        setTickerName((Expression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        setBrokerName((Expression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        setUsername((Expression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        setPassword((Expression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        setTimeframe(TIMEFRAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__TICKER_NAME:
        return tickerName != null;
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        return brokerName != null;
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return username != null;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return password != null;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        return timeframe != TIMEFRAME_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (timeframe: ");
    result.append(timeframe);
    result.append(')');
    return result.toString();
  }

} //ConnectStatementImpl
