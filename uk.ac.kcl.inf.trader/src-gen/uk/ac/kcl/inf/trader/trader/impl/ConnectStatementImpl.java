/**
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.trader.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.trader.trader.ConnectStatement;
import uk.ac.kcl.inf.trader.trader.NumExpression;
import uk.ac.kcl.inf.trader.trader.StringPrimary;
import uk.ac.kcl.inf.trader.trader.TraderPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connect Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getBrokerName <em>Broker Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getUsername <em>Username</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getPassword <em>Password</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getLeverage <em>Leverage</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getMoney <em>Money</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.trader.trader.impl.ConnectStatementImpl#getTimeframe <em>Timeframe</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectStatementImpl extends StatementImpl implements ConnectStatement
{
  /**
   * The default value of the '{@link #getBrokerName() <em>Broker Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrokerName()
   * @generated
   * @ordered
   */
  protected static final String BROKER_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBrokerName() <em>Broker Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrokerName()
   * @generated
   * @ordered
   */
  protected String brokerName = BROKER_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUsername() <em>Username</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsername()
   * @generated
   * @ordered
   */
  protected StringPrimary username;

  /**
   * The cached value of the '{@link #getPassword() <em>Password</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPassword()
   * @generated
   * @ordered
   */
  protected StringPrimary password;

  /**
   * The cached value of the '{@link #getLeverage() <em>Leverage</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeverage()
   * @generated
   * @ordered
   */
  protected NumExpression leverage;

  /**
   * The cached value of the '{@link #getMoney() <em>Money</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoney()
   * @generated
   * @ordered
   */
  protected NumExpression money;

  /**
   * The cached value of the '{@link #getTimeframe() <em>Timeframe</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeframe()
   * @generated
   * @ordered
   */
  protected StringPrimary timeframe;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraderPackage.Literals.CONNECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBrokerName()
  {
    return brokerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBrokerName(String newBrokerName)
  {
    String oldBrokerName = brokerName;
    brokerName = newBrokerName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__BROKER_NAME, oldBrokerName, brokerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringPrimary getUsername()
  {
    return username;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUsername(StringPrimary newUsername, NotificationChain msgs)
  {
    StringPrimary oldUsername = username;
    username = newUsername;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__USERNAME, oldUsername, newUsername);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUsername(StringPrimary newUsername)
  {
    if (newUsername != username)
    {
      NotificationChain msgs = null;
      if (username != null)
        msgs = ((InternalEObject)username).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__USERNAME, null, msgs);
      if (newUsername != null)
        msgs = ((InternalEObject)newUsername).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__USERNAME, null, msgs);
      msgs = basicSetUsername(newUsername, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__USERNAME, newUsername, newUsername));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringPrimary getPassword()
  {
    return password;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPassword(StringPrimary newPassword, NotificationChain msgs)
  {
    StringPrimary oldPassword = password;
    password = newPassword;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__PASSWORD, oldPassword, newPassword);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPassword(StringPrimary newPassword)
  {
    if (newPassword != password)
    {
      NotificationChain msgs = null;
      if (password != null)
        msgs = ((InternalEObject)password).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__PASSWORD, null, msgs);
      if (newPassword != null)
        msgs = ((InternalEObject)newPassword).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__PASSWORD, null, msgs);
      msgs = basicSetPassword(newPassword, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__PASSWORD, newPassword, newPassword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumExpression getLeverage()
  {
    return leverage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeverage(NumExpression newLeverage, NotificationChain msgs)
  {
    NumExpression oldLeverage = leverage;
    leverage = newLeverage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__LEVERAGE, oldLeverage, newLeverage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeverage(NumExpression newLeverage)
  {
    if (newLeverage != leverage)
    {
      NotificationChain msgs = null;
      if (leverage != null)
        msgs = ((InternalEObject)leverage).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__LEVERAGE, null, msgs);
      if (newLeverage != null)
        msgs = ((InternalEObject)newLeverage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__LEVERAGE, null, msgs);
      msgs = basicSetLeverage(newLeverage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__LEVERAGE, newLeverage, newLeverage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumExpression getMoney()
  {
    return money;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMoney(NumExpression newMoney, NotificationChain msgs)
  {
    NumExpression oldMoney = money;
    money = newMoney;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__MONEY, oldMoney, newMoney);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoney(NumExpression newMoney)
  {
    if (newMoney != money)
    {
      NotificationChain msgs = null;
      if (money != null)
        msgs = ((InternalEObject)money).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__MONEY, null, msgs);
      if (newMoney != null)
        msgs = ((InternalEObject)newMoney).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__MONEY, null, msgs);
      msgs = basicSetMoney(newMoney, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__MONEY, newMoney, newMoney));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringPrimary getTimeframe()
  {
    return timeframe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeframe(StringPrimary newTimeframe, NotificationChain msgs)
  {
    StringPrimary oldTimeframe = timeframe;
    timeframe = newTimeframe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__TIMEFRAME, oldTimeframe, newTimeframe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeframe(StringPrimary newTimeframe)
  {
    if (newTimeframe != timeframe)
    {
      NotificationChain msgs = null;
      if (timeframe != null)
        msgs = ((InternalEObject)timeframe).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__TIMEFRAME, null, msgs);
      if (newTimeframe != null)
        msgs = ((InternalEObject)newTimeframe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraderPackage.CONNECT_STATEMENT__TIMEFRAME, null, msgs);
      msgs = basicSetTimeframe(newTimeframe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraderPackage.CONNECT_STATEMENT__TIMEFRAME, newTimeframe, newTimeframe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return basicSetUsername(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return basicSetPassword(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__LEVERAGE:
        return basicSetLeverage(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__MONEY:
        return basicSetMoney(null, msgs);
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        return basicSetTimeframe(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        return getBrokerName();
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return getUsername();
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return getPassword();
      case TraderPackage.CONNECT_STATEMENT__LEVERAGE:
        return getLeverage();
      case TraderPackage.CONNECT_STATEMENT__MONEY:
        return getMoney();
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        return getTimeframe();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        setBrokerName((String)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        setUsername((StringPrimary)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        setPassword((StringPrimary)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__LEVERAGE:
        setLeverage((NumExpression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__MONEY:
        setMoney((NumExpression)newValue);
        return;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        setTimeframe((StringPrimary)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        setBrokerName(BROKER_NAME_EDEFAULT);
        return;
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        setUsername((StringPrimary)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        setPassword((StringPrimary)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__LEVERAGE:
        setLeverage((NumExpression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__MONEY:
        setMoney((NumExpression)null);
        return;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        setTimeframe((StringPrimary)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraderPackage.CONNECT_STATEMENT__BROKER_NAME:
        return BROKER_NAME_EDEFAULT == null ? brokerName != null : !BROKER_NAME_EDEFAULT.equals(brokerName);
      case TraderPackage.CONNECT_STATEMENT__USERNAME:
        return username != null;
      case TraderPackage.CONNECT_STATEMENT__PASSWORD:
        return password != null;
      case TraderPackage.CONNECT_STATEMENT__LEVERAGE:
        return leverage != null;
      case TraderPackage.CONNECT_STATEMENT__MONEY:
        return money != null;
      case TraderPackage.CONNECT_STATEMENT__TIMEFRAME:
        return timeframe != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (brokerName: ");
    result.append(brokerName);
    result.append(')');
    return result.toString();
  }

} //ConnectStatementImpl
