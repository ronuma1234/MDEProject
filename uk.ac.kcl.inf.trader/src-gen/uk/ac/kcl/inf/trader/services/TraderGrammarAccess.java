/*
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraderGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraderProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.TraderProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//TraderProgram:
		//    statements+=Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateBotStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListBotsStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExecuteBotsStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLoopStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Statement:
		//    ConnectStatement | CreateBotStatement | ListBotsStatement | ExecuteBotsStatement | VariableDeclaration | LoopStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectStatement | CreateBotStatement | ListBotsStatement | ExecuteBotsStatement | VariableDeclaration | LoopStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectStatement
		public RuleCall getConnectStatementParserRuleCall_0() { return cConnectStatementParserRuleCall_0; }
		
		//CreateBotStatement
		public RuleCall getCreateBotStatementParserRuleCall_1() { return cCreateBotStatementParserRuleCall_1; }
		
		//ListBotsStatement
		public RuleCall getListBotsStatementParserRuleCall_2() { return cListBotsStatementParserRuleCall_2; }
		
		//ExecuteBotsStatement
		public RuleCall getExecuteBotsStatementParserRuleCall_3() { return cExecuteBotsStatementParserRuleCall_3; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_4() { return cVariableDeclarationParserRuleCall_4; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_5() { return cLoopStatementParserRuleCall_5; }
	}
	public class ConnectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.ConnectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTradeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTickerNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTickerNameStringPrimaryParserRuleCall_3_0 = (RuleCall)cTickerNameAssignment_3.eContents().get(0);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cServerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBrokerNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBrokerNameStringPrimaryParserRuleCall_6_0 = (RuleCall)cBrokerNameAssignment_6.eContents().get(0);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLoginKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUsernameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUsernameStringPrimaryParserRuleCall_9_0 = (RuleCall)cUsernameAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cPasswordKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPasswordAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPasswordStringPrimaryParserRuleCall_12_0 = (RuleCall)cPasswordAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTimeframeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cTimeframeAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cTimeframeTimeFrameDefEnumRuleCall_15_0 = (RuleCall)cTimeframeAssignment_15.eContents().get(0);
		
		//ConnectStatement:
		//    "connect" "to" "trade" tickerName = StringPrimary "on"
		//    "server" brokerName = StringPrimary "with"
		//    "login" username = StringPrimary ","
		//    "password" password = StringPrimary ","
		//    "timeframe" timeframe = TimeFrameDef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"connect" "to" "trade" tickerName = StringPrimary "on"
		//"server" brokerName = StringPrimary "with"
		//"login" username = StringPrimary ","
		//"password" password = StringPrimary ","
		//"timeframe" timeframe = TimeFrameDef
		public Group getGroup() { return cGroup; }
		
		//"connect"
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"trade"
		public Keyword getTradeKeyword_2() { return cTradeKeyword_2; }
		
		//tickerName = StringPrimary
		public Assignment getTickerNameAssignment_3() { return cTickerNameAssignment_3; }
		
		//StringPrimary
		public RuleCall getTickerNameStringPrimaryParserRuleCall_3_0() { return cTickerNameStringPrimaryParserRuleCall_3_0; }
		
		//"on"
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//"server"
		public Keyword getServerKeyword_5() { return cServerKeyword_5; }
		
		//brokerName = StringPrimary
		public Assignment getBrokerNameAssignment_6() { return cBrokerNameAssignment_6; }
		
		//StringPrimary
		public RuleCall getBrokerNameStringPrimaryParserRuleCall_6_0() { return cBrokerNameStringPrimaryParserRuleCall_6_0; }
		
		//"with"
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }
		
		//"login"
		public Keyword getLoginKeyword_8() { return cLoginKeyword_8; }
		
		//username = StringPrimary
		public Assignment getUsernameAssignment_9() { return cUsernameAssignment_9; }
		
		//StringPrimary
		public RuleCall getUsernameStringPrimaryParserRuleCall_9_0() { return cUsernameStringPrimaryParserRuleCall_9_0; }
		
		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//"password"
		public Keyword getPasswordKeyword_11() { return cPasswordKeyword_11; }
		
		//password = StringPrimary
		public Assignment getPasswordAssignment_12() { return cPasswordAssignment_12; }
		
		//StringPrimary
		public RuleCall getPasswordStringPrimaryParserRuleCall_12_0() { return cPasswordStringPrimaryParserRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//"timeframe"
		public Keyword getTimeframeKeyword_14() { return cTimeframeKeyword_14; }
		
		//timeframe = TimeFrameDef
		public Assignment getTimeframeAssignment_15() { return cTimeframeAssignment_15; }
		
		//TimeFrameDef
		public RuleCall getTimeframeTimeFrameDefEnumRuleCall_15_0() { return cTimeframeTimeFrameDefEnumRuleCall_15_0; }
	}
	public class CreateBotStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.CreateBotStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStrategyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStrategyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStrategyStrategyDefEnumRuleCall_4_0 = (RuleCall)cStrategyAssignment_4.eContents().get(0);
		private final Keyword cUsingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLotKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSizeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLotSizeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLotSizeAdditionParserRuleCall_8_0 = (RuleCall)cLotSizeAssignment_8.eContents().get(0);
		
		//CreateBotStatement:
		//    "create" "bot" "with" "strategy" strategy = StrategyDef "using" "lot" "size" lotSize = Addition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"create" "bot" "with" "strategy" strategy = StrategyDef "using" "lot" "size" lotSize = Addition
		public Group getGroup() { return cGroup; }
		
		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"bot"
		public Keyword getBotKeyword_1() { return cBotKeyword_1; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//"strategy"
		public Keyword getStrategyKeyword_3() { return cStrategyKeyword_3; }
		
		//strategy = StrategyDef
		public Assignment getStrategyAssignment_4() { return cStrategyAssignment_4; }
		
		//StrategyDef
		public RuleCall getStrategyStrategyDefEnumRuleCall_4_0() { return cStrategyStrategyDefEnumRuleCall_4_0; }
		
		//"using"
		public Keyword getUsingKeyword_5() { return cUsingKeyword_5; }
		
		//"lot"
		public Keyword getLotKeyword_6() { return cLotKeyword_6; }
		
		//"size"
		public Keyword getSizeKeyword_7() { return cSizeKeyword_7; }
		
		//lotSize = Addition
		public Assignment getLotSizeAssignment_8() { return cLotSizeAssignment_8; }
		
		//Addition
		public RuleCall getLotSizeAdditionParserRuleCall_8_0() { return cLotSizeAdditionParserRuleCall_8_0; }
	}
	public class ListBotsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.ListBotsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cListCommandSeeKeyword_0_0 = (Keyword)cListCommandAssignment_0.eContents().get(0);
		private final Keyword cRegisteredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBotsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ListBotsStatement:
		//    listCommand = "see" "registered" "bots"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//listCommand = "see" "registered" "bots"
		public Group getGroup() { return cGroup; }
		
		//listCommand = "see"
		public Assignment getListCommandAssignment_0() { return cListCommandAssignment_0; }
		
		//"see"
		public Keyword getListCommandSeeKeyword_0_0() { return cListCommandSeeKeyword_0_0; }
		
		//"registered"
		public Keyword getRegisteredKeyword_1() { return cRegisteredKeyword_1; }
		
		//"bots"
		public Keyword getBotsKeyword_2() { return cBotsKeyword_2; }
	}
	public class ExecuteBotsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.ExecuteBotsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBotsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDaysAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDaysAdditionParserRuleCall_3_0 = (RuleCall)cDaysAssignment_3.eContents().get(0);
		private final Keyword cDaysKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cHoursAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHoursAdditionParserRuleCall_5_0 = (RuleCall)cHoursAssignment_5.eContents().get(0);
		private final Keyword cHoursKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMinutesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMinutesAdditionParserRuleCall_7_0 = (RuleCall)cMinutesAssignment_7.eContents().get(0);
		private final Keyword cMinutesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSecondsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSecondsAdditionParserRuleCall_9_0 = (RuleCall)cSecondsAssignment_9.eContents().get(0);
		private final Keyword cSecondsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ExecuteBotsStatement:
		//    "execute" "bots" "for" days = Addition "days" hours = Addition "hours" minutes = Addition "minutes" seconds = Addition "seconds"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"execute" "bots" "for" days = Addition "days" hours = Addition "hours" minutes = Addition "minutes" seconds = Addition "seconds"
		public Group getGroup() { return cGroup; }
		
		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//"bots"
		public Keyword getBotsKeyword_1() { return cBotsKeyword_1; }
		
		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//days = Addition
		public Assignment getDaysAssignment_3() { return cDaysAssignment_3; }
		
		//Addition
		public RuleCall getDaysAdditionParserRuleCall_3_0() { return cDaysAdditionParserRuleCall_3_0; }
		
		//"days"
		public Keyword getDaysKeyword_4() { return cDaysKeyword_4; }
		
		//hours = Addition
		public Assignment getHoursAssignment_5() { return cHoursAssignment_5; }
		
		//Addition
		public RuleCall getHoursAdditionParserRuleCall_5_0() { return cHoursAdditionParserRuleCall_5_0; }
		
		//"hours"
		public Keyword getHoursKeyword_6() { return cHoursKeyword_6; }
		
		//minutes = Addition
		public Assignment getMinutesAssignment_7() { return cMinutesAssignment_7; }
		
		//Addition
		public RuleCall getMinutesAdditionParserRuleCall_7_0() { return cMinutesAdditionParserRuleCall_7_0; }
		
		//"minutes"
		public Keyword getMinutesKeyword_8() { return cMinutesKeyword_8; }
		
		//seconds = Addition
		public Assignment getSecondsAssignment_9() { return cSecondsAssignment_9; }
		
		//Addition
		public RuleCall getSecondsAdditionParserRuleCall_9_0() { return cSecondsAdditionParserRuleCall_9_0; }
		
		//"seconds"
		public Keyword getSecondsKeyword_10() { return cSecondsKeyword_10; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValueStringValueParserRuleCall_3_0_0 = (RuleCall)cValueAssignment_3_0.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cValueIntValueParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(value=StringValue | value=RealValue | value=IntValue)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//value=StringValue
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }
		
		//StringValue
		public RuleCall getValueStringValueParserRuleCall_3_0_0() { return cValueStringValueParserRuleCall_3_0_0; }
		
		//value=RealValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_3_1_0() { return cValueRealValueParserRuleCall_3_1_0; }
		
		//value=IntValue
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//IntValue
		public RuleCall getValueIntValueParserRuleCall_3_2_0() { return cValueIntValueParserRuleCall_3_2_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.RealValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealValue:
		//    value=REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//REAL
		public RuleCall getValueREALParserRuleCall_0() { return cValueREALParserRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountAdditionParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LoopStatement:
		//    "loop" count = Addition "times" "do"
		//        statements += Statement+
		//    "end"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"loop" count = Addition "times" "do"
		//    statements += Statement+
		//"end"
		public Group getGroup() { return cGroup; }
		
		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//count = Addition
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//Addition
		public RuleCall getCountAdditionParserRuleCall_1_0() { return cCountAdditionParserRuleCall_1_0; }
		
		//"times"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//statements += Statement+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumVarExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary returns Expression:
		//    IntValue |
		//    RealValue |
		//    NumVarExpression |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue |
		//RealValue |
		//NumVarExpression |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//RealValue
		public RuleCall getRealValueParserRuleCall_1() { return cRealValueParserRuleCall_1; }
		
		//NumVarExpression
		public RuleCall getNumVarExpressionParserRuleCall_2() { return cNumVarExpressionParserRuleCall_2; }
		
		//"(" Addition ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class NumVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.NumVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//NumVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class StringPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringVarExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringPrimary returns Expression:
		//    StringVarExpression |
		//    StringValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringVarExpression |
		//StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringVarExpression
		public RuleCall getStringVarExpressionParserRuleCall_0() { return cStringVarExpressionParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
	}
	public class StringVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//StringVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	
	public class StrategyDefElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StrategyDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBuyAndHoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBuyAndHoldBuyAndHoldKeyword_0_0 = (Keyword)cBuyAndHoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMeanReversionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMeanReversionMeanReversionKeyword_1_0 = (Keyword)cMeanReversionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StrategyDef:
		//    buyAndHold | meanReversion
		//;
		public EnumRule getRule() { return rule; }
		
		//buyAndHold | meanReversion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//buyAndHold
		public EnumLiteralDeclaration getBuyAndHoldEnumLiteralDeclaration_0() { return cBuyAndHoldEnumLiteralDeclaration_0; }
		
		public Keyword getBuyAndHoldBuyAndHoldKeyword_0_0() { return cBuyAndHoldBuyAndHoldKeyword_0_0; }
		
		//meanReversion
		public EnumLiteralDeclaration getMeanReversionEnumLiteralDeclaration_1() { return cMeanReversionEnumLiteralDeclaration_1; }
		
		public Keyword getMeanReversionMeanReversionKeyword_1_0() { return cMeanReversionMeanReversionKeyword_1_0; }
	}
	public class TimeFrameDefElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.TimeFrameDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cM1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cM1M1Keyword_0_0 = (Keyword)cM1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cM2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cM2M2Keyword_1_0 = (Keyword)cM2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cM3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cM3M3Keyword_2_0 = (Keyword)cM3EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cM4EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cM4M4Keyword_3_0 = (Keyword)cM4EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cM5EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cM5M5Keyword_4_0 = (Keyword)cM5EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cM6EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cM6M6Keyword_5_0 = (Keyword)cM6EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cM10EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cM10M10Keyword_6_0 = (Keyword)cM10EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cM12EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cM12M12Keyword_7_0 = (Keyword)cM12EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cM20EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cM20M20Keyword_8_0 = (Keyword)cM20EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cM30EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cM30M30Keyword_9_0 = (Keyword)cM30EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cH1EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cH1H1Keyword_10_0 = (Keyword)cH1EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cH2EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cH2H2Keyword_11_0 = (Keyword)cH2EnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cH3EnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cH3H3Keyword_12_0 = (Keyword)cH3EnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cH4EnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cH4H4Keyword_13_0 = (Keyword)cH4EnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cH6EnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cH6H6Keyword_14_0 = (Keyword)cH6EnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cH8EnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cH8H8Keyword_15_0 = (Keyword)cH8EnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cH12EnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cH12H12Keyword_16_0 = (Keyword)cH12EnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cD1EnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cD1D1Keyword_17_0 = (Keyword)cD1EnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cW1EnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cW1W1Keyword_18_0 = (Keyword)cW1EnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cMN1EnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cMN1MN1Keyword_19_0 = (Keyword)cMN1EnumLiteralDeclaration_19.eContents().get(0);
		
		//enum TimeFrameDef:
		//    M1 | M2 | M3 | M4 | M5 | M6 | M10 | M12 | M20 | M30 |
		//    H1 | H2 | H3 | H4 | H6 | H8 | H12 |  D1 |  W1 | MN1
		//;
		public EnumRule getRule() { return rule; }
		
		//M1 | M2 | M3 | M4 | M5 | M6 | M10 | M12 | M20 | M30 |
		//H1 | H2 | H3 | H4 | H6 | H8 | H12 |  D1 |  W1 | MN1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//M1
		public EnumLiteralDeclaration getM1EnumLiteralDeclaration_0() { return cM1EnumLiteralDeclaration_0; }
		
		public Keyword getM1M1Keyword_0_0() { return cM1M1Keyword_0_0; }
		
		//M2
		public EnumLiteralDeclaration getM2EnumLiteralDeclaration_1() { return cM2EnumLiteralDeclaration_1; }
		
		public Keyword getM2M2Keyword_1_0() { return cM2M2Keyword_1_0; }
		
		//M3
		public EnumLiteralDeclaration getM3EnumLiteralDeclaration_2() { return cM3EnumLiteralDeclaration_2; }
		
		public Keyword getM3M3Keyword_2_0() { return cM3M3Keyword_2_0; }
		
		//M4
		public EnumLiteralDeclaration getM4EnumLiteralDeclaration_3() { return cM4EnumLiteralDeclaration_3; }
		
		public Keyword getM4M4Keyword_3_0() { return cM4M4Keyword_3_0; }
		
		//M5
		public EnumLiteralDeclaration getM5EnumLiteralDeclaration_4() { return cM5EnumLiteralDeclaration_4; }
		
		public Keyword getM5M5Keyword_4_0() { return cM5M5Keyword_4_0; }
		
		//M6
		public EnumLiteralDeclaration getM6EnumLiteralDeclaration_5() { return cM6EnumLiteralDeclaration_5; }
		
		public Keyword getM6M6Keyword_5_0() { return cM6M6Keyword_5_0; }
		
		//M10
		public EnumLiteralDeclaration getM10EnumLiteralDeclaration_6() { return cM10EnumLiteralDeclaration_6; }
		
		public Keyword getM10M10Keyword_6_0() { return cM10M10Keyword_6_0; }
		
		//M12
		public EnumLiteralDeclaration getM12EnumLiteralDeclaration_7() { return cM12EnumLiteralDeclaration_7; }
		
		public Keyword getM12M12Keyword_7_0() { return cM12M12Keyword_7_0; }
		
		//M20
		public EnumLiteralDeclaration getM20EnumLiteralDeclaration_8() { return cM20EnumLiteralDeclaration_8; }
		
		public Keyword getM20M20Keyword_8_0() { return cM20M20Keyword_8_0; }
		
		//M30
		public EnumLiteralDeclaration getM30EnumLiteralDeclaration_9() { return cM30EnumLiteralDeclaration_9; }
		
		public Keyword getM30M30Keyword_9_0() { return cM30M30Keyword_9_0; }
		
		//H1
		public EnumLiteralDeclaration getH1EnumLiteralDeclaration_10() { return cH1EnumLiteralDeclaration_10; }
		
		public Keyword getH1H1Keyword_10_0() { return cH1H1Keyword_10_0; }
		
		//H2
		public EnumLiteralDeclaration getH2EnumLiteralDeclaration_11() { return cH2EnumLiteralDeclaration_11; }
		
		public Keyword getH2H2Keyword_11_0() { return cH2H2Keyword_11_0; }
		
		//H3
		public EnumLiteralDeclaration getH3EnumLiteralDeclaration_12() { return cH3EnumLiteralDeclaration_12; }
		
		public Keyword getH3H3Keyword_12_0() { return cH3H3Keyword_12_0; }
		
		//H4
		public EnumLiteralDeclaration getH4EnumLiteralDeclaration_13() { return cH4EnumLiteralDeclaration_13; }
		
		public Keyword getH4H4Keyword_13_0() { return cH4H4Keyword_13_0; }
		
		//H6
		public EnumLiteralDeclaration getH6EnumLiteralDeclaration_14() { return cH6EnumLiteralDeclaration_14; }
		
		public Keyword getH6H6Keyword_14_0() { return cH6H6Keyword_14_0; }
		
		//H8
		public EnumLiteralDeclaration getH8EnumLiteralDeclaration_15() { return cH8EnumLiteralDeclaration_15; }
		
		public Keyword getH8H8Keyword_15_0() { return cH8H8Keyword_15_0; }
		
		//H12
		public EnumLiteralDeclaration getH12EnumLiteralDeclaration_16() { return cH12EnumLiteralDeclaration_16; }
		
		public Keyword getH12H12Keyword_16_0() { return cH12H12Keyword_16_0; }
		
		//D1
		public EnumLiteralDeclaration getD1EnumLiteralDeclaration_17() { return cD1EnumLiteralDeclaration_17; }
		
		public Keyword getD1D1Keyword_17_0() { return cD1D1Keyword_17_0; }
		
		//W1
		public EnumLiteralDeclaration getW1EnumLiteralDeclaration_18() { return cW1EnumLiteralDeclaration_18; }
		
		public Keyword getW1W1Keyword_18_0() { return cW1W1Keyword_18_0; }
		
		//MN1
		public EnumLiteralDeclaration getMN1EnumLiteralDeclaration_19() { return cMN1EnumLiteralDeclaration_19; }
		
		public Keyword getMN1MN1Keyword_19_0() { return cMN1MN1Keyword_19_0; }
	}
	
	private final TraderProgramElements pTraderProgram;
	private final StatementElements pStatement;
	private final ConnectStatementElements pConnectStatement;
	private final CreateBotStatementElements pCreateBotStatement;
	private final StrategyDefElements eStrategyDef;
	private final TimeFrameDefElements eTimeFrameDef;
	private final ListBotsStatementElements pListBotsStatement;
	private final ExecuteBotsStatementElements pExecuteBotsStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StringValueElements pStringValue;
	private final RealValueElements pRealValue;
	private final IntValueElements pIntValue;
	private final LoopStatementElements pLoopStatement;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final NumVarExpressionElements pNumVarExpression;
	private final REALElements pREAL;
	private final StringPrimaryElements pStringPrimary;
	private final StringVarExpressionElements pStringVarExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraderGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraderProgram = new TraderProgramElements();
		this.pStatement = new StatementElements();
		this.pConnectStatement = new ConnectStatementElements();
		this.pCreateBotStatement = new CreateBotStatementElements();
		this.eStrategyDef = new StrategyDefElements();
		this.eTimeFrameDef = new TimeFrameDefElements();
		this.pListBotsStatement = new ListBotsStatementElements();
		this.pExecuteBotsStatement = new ExecuteBotsStatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStringValue = new StringValueElements();
		this.pRealValue = new RealValueElements();
		this.pIntValue = new IntValueElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pNumVarExpression = new NumVarExpressionElements();
		this.pREAL = new REALElements();
		this.pStringPrimary = new StringPrimaryElements();
		this.pStringVarExpression = new StringVarExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.trader.Trader".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TraderProgram:
	//    statements+=Statement*
	//;
	public TraderProgramElements getTraderProgramAccess() {
		return pTraderProgram;
	}
	
	public ParserRule getTraderProgramRule() {
		return getTraderProgramAccess().getRule();
	}
	
	//Statement:
	//    ConnectStatement | CreateBotStatement | ListBotsStatement | ExecuteBotsStatement | VariableDeclaration | LoopStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ConnectStatement:
	//    "connect" "to" "trade" tickerName = StringPrimary "on"
	//    "server" brokerName = StringPrimary "with"
	//    "login" username = StringPrimary ","
	//    "password" password = StringPrimary ","
	//    "timeframe" timeframe = TimeFrameDef
	//;
	public ConnectStatementElements getConnectStatementAccess() {
		return pConnectStatement;
	}
	
	public ParserRule getConnectStatementRule() {
		return getConnectStatementAccess().getRule();
	}
	
	//CreateBotStatement:
	//    "create" "bot" "with" "strategy" strategy = StrategyDef "using" "lot" "size" lotSize = Addition
	//;
	public CreateBotStatementElements getCreateBotStatementAccess() {
		return pCreateBotStatement;
	}
	
	public ParserRule getCreateBotStatementRule() {
		return getCreateBotStatementAccess().getRule();
	}
	
	//enum StrategyDef:
	//    buyAndHold | meanReversion
	//;
	public StrategyDefElements getStrategyDefAccess() {
		return eStrategyDef;
	}
	
	public EnumRule getStrategyDefRule() {
		return getStrategyDefAccess().getRule();
	}
	
	//enum TimeFrameDef:
	//    M1 | M2 | M3 | M4 | M5 | M6 | M10 | M12 | M20 | M30 |
	//    H1 | H2 | H3 | H4 | H6 | H8 | H12 |  D1 |  W1 | MN1
	//;
	public TimeFrameDefElements getTimeFrameDefAccess() {
		return eTimeFrameDef;
	}
	
	public EnumRule getTimeFrameDefRule() {
		return getTimeFrameDefAccess().getRule();
	}
	
	//ListBotsStatement:
	//    listCommand = "see" "registered" "bots"
	//;
	public ListBotsStatementElements getListBotsStatementAccess() {
		return pListBotsStatement;
	}
	
	public ParserRule getListBotsStatementRule() {
		return getListBotsStatementAccess().getRule();
	}
	
	//ExecuteBotsStatement:
	//    "execute" "bots" "for" days = Addition "days" hours = Addition "hours" minutes = Addition "minutes" seconds = Addition "seconds"
	//;
	public ExecuteBotsStatementElements getExecuteBotsStatementAccess() {
		return pExecuteBotsStatement;
	}
	
	public ParserRule getExecuteBotsStatementRule() {
		return getExecuteBotsStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING
	//;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//RealValue:
	//    value=REAL
	//;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//IntValue:
	//    value=INT
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//LoopStatement:
	//    "loop" count = Addition "times" "do"
	//        statements += Statement+
	//    "end"
	//;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//Addition returns Expression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns Expression:
	//    IntValue |
	//    RealValue |
	//    NumVarExpression |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//NumVarExpression:
	//    var = [VariableDeclaration]
	//;
	public NumVarExpressionElements getNumVarExpressionAccess() {
		return pNumVarExpression;
	}
	
	public ParserRule getNumVarExpressionRule() {
		return getNumVarExpressionAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//StringPrimary returns Expression:
	//    StringVarExpression |
	//    StringValue
	//;
	public StringPrimaryElements getStringPrimaryAccess() {
		return pStringPrimary;
	}
	
	public ParserRule getStringPrimaryRule() {
		return getStringPrimaryAccess().getRule();
	}
	
	//StringVarExpression:
	//    var = [VariableDeclaration]
	//;
	public StringVarExpressionElements getStringVarExpressionAccess() {
		return pStringVarExpression;
	}
	
	public ParserRule getStringVarExpressionRule() {
		return getStringVarExpressionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
