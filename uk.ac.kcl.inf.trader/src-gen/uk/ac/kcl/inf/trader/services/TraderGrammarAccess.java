/*
 * generated by Xtext 2.34.0
 */
package uk.ac.kcl.inf.trader.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraderGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraderProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.TraderProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//TraderProgram:
		//    statements+=Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTradingBotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListBotsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExecuteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLoopStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//    ConnectStatement | TradingBot | ListBots | Execute | Stop | VariableDeclaration | LoopStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectStatement | TradingBot | ListBots | Execute | Stop | VariableDeclaration | LoopStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectStatement
		public RuleCall getConnectStatementParserRuleCall_0() { return cConnectStatementParserRuleCall_0; }
		
		//TradingBot
		public RuleCall getTradingBotParserRuleCall_1() { return cTradingBotParserRuleCall_1; }
		
		//ListBots
		public RuleCall getListBotsParserRuleCall_2() { return cListBotsParserRuleCall_2; }
		
		//Execute
		public RuleCall getExecuteParserRuleCall_3() { return cExecuteParserRuleCall_3; }
		
		//Stop
		public RuleCall getStopParserRuleCall_4() { return cStopParserRuleCall_4; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_5() { return cVariableDeclarationParserRuleCall_5; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_6() { return cLoopStatementParserRuleCall_6; }
	}
	public class ConnectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.ConnectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBrokerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrokerNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrokerNameIDTerminalRuleCall_3_0 = (RuleCall)cBrokerNameAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cUsernameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUsernameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUsernameStringPrimaryParserRuleCall_6_0 = (RuleCall)cUsernameAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPasswordKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPasswordAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPasswordStringPrimaryParserRuleCall_9_0 = (RuleCall)cPasswordAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeverageKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cLeverageAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLeverageAdditionParserRuleCall_12_0 = (RuleCall)cLeverageAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cMoneyKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cMoneyAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cMoneyAdditionParserRuleCall_15_0 = (RuleCall)cMoneyAssignment_15.eContents().get(0);
		private final Keyword cCommaKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cTimeframeKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTimeframeAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTimeframeStringPrimaryParserRuleCall_18_0 = (RuleCall)cTimeframeAssignment_18.eContents().get(0);
		
		//ConnectStatement:
		//    "connect" "to" "broker" brokerName = ID "with"
		//    "username:" username = StringPrimary ","
		//    "password:" password = StringPrimary ","
		//    "leverage:" leverage = Addition ","
		//    "money:" money = Addition ","
		//    "timeframe:" timeframe = StringPrimary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"connect" "to" "broker" brokerName = ID "with"
		//"username:" username = StringPrimary ","
		//"password:" password = StringPrimary ","
		//"leverage:" leverage = Addition ","
		//"money:" money = Addition ","
		//"timeframe:" timeframe = StringPrimary
		public Group getGroup() { return cGroup; }
		
		//"connect"
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"broker"
		public Keyword getBrokerKeyword_2() { return cBrokerKeyword_2; }
		
		//brokerName = ID
		public Assignment getBrokerNameAssignment_3() { return cBrokerNameAssignment_3; }
		
		//ID
		public RuleCall getBrokerNameIDTerminalRuleCall_3_0() { return cBrokerNameIDTerminalRuleCall_3_0; }
		
		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//"username:"
		public Keyword getUsernameKeyword_5() { return cUsernameKeyword_5; }
		
		//username = StringPrimary
		public Assignment getUsernameAssignment_6() { return cUsernameAssignment_6; }
		
		//StringPrimary
		public RuleCall getUsernameStringPrimaryParserRuleCall_6_0() { return cUsernameStringPrimaryParserRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//"password:"
		public Keyword getPasswordKeyword_8() { return cPasswordKeyword_8; }
		
		//password = StringPrimary
		public Assignment getPasswordAssignment_9() { return cPasswordAssignment_9; }
		
		//StringPrimary
		public RuleCall getPasswordStringPrimaryParserRuleCall_9_0() { return cPasswordStringPrimaryParserRuleCall_9_0; }
		
		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//"leverage:"
		public Keyword getLeverageKeyword_11() { return cLeverageKeyword_11; }
		
		//leverage = Addition
		public Assignment getLeverageAssignment_12() { return cLeverageAssignment_12; }
		
		//Addition
		public RuleCall getLeverageAdditionParserRuleCall_12_0() { return cLeverageAdditionParserRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//"money:"
		public Keyword getMoneyKeyword_14() { return cMoneyKeyword_14; }
		
		//money = Addition
		public Assignment getMoneyAssignment_15() { return cMoneyAssignment_15; }
		
		//Addition
		public RuleCall getMoneyAdditionParserRuleCall_15_0() { return cMoneyAdditionParserRuleCall_15_0; }
		
		//","
		public Keyword getCommaKeyword_16() { return cCommaKeyword_16; }
		
		//"timeframe:"
		public Keyword getTimeframeKeyword_17() { return cTimeframeKeyword_17; }
		
		//timeframe = StringPrimary
		public Assignment getTimeframeAssignment_18() { return cTimeframeAssignment_18; }
		
		//StringPrimary
		public RuleCall getTimeframeStringPrimaryParserRuleCall_18_0() { return cTimeframeStringPrimaryParserRuleCall_18_0; }
	}
	public class TradingBotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.TradingBot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStrategyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStrategyStrategyDefEnumRuleCall_3_0 = (RuleCall)cStrategyAssignment_3.eContents().get(0);
		private final Keyword cStrategyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cUsingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFundAdditionParserRuleCall_6_0 = (RuleCall)cFundAssignment_6.eContents().get(0);
		private final Keyword cFundsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TradingBot:
		//    "create" "bot" "with" strategy = StrategyDef "strategy" "using" fund = Addition "funds"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"create" "bot" "with" strategy = StrategyDef "strategy" "using" fund = Addition "funds"
		public Group getGroup() { return cGroup; }
		
		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"bot"
		public Keyword getBotKeyword_1() { return cBotKeyword_1; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//strategy = StrategyDef
		public Assignment getStrategyAssignment_3() { return cStrategyAssignment_3; }
		
		//StrategyDef
		public RuleCall getStrategyStrategyDefEnumRuleCall_3_0() { return cStrategyStrategyDefEnumRuleCall_3_0; }
		
		//"strategy"
		public Keyword getStrategyKeyword_4() { return cStrategyKeyword_4; }
		
		//"using"
		public Keyword getUsingKeyword_5() { return cUsingKeyword_5; }
		
		//fund = Addition
		public Assignment getFundAssignment_6() { return cFundAssignment_6; }
		
		//Addition
		public RuleCall getFundAdditionParserRuleCall_6_0() { return cFundAdditionParserRuleCall_6_0; }
		
		//"funds"
		public Keyword getFundsKeyword_7() { return cFundsKeyword_7; }
	}
	public class ListBotsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.ListBots");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cListCommandSeeKeyword_0_0 = (Keyword)cListCommandAssignment_0.eContents().get(0);
		private final Keyword cRegisteredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBotsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ListBots:
		//    listCommand = "see" "registered" "bots"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//listCommand = "see" "registered" "bots"
		public Group getGroup() { return cGroup; }
		
		//listCommand = "see"
		public Assignment getListCommandAssignment_0() { return cListCommandAssignment_0; }
		
		//"see"
		public Keyword getListCommandSeeKeyword_0_0() { return cListCommandSeeKeyword_0_0; }
		
		//"registered"
		public Keyword getRegisteredKeyword_1() { return cRegisteredKeyword_1; }
		
		//"bots"
		public Keyword getBotsKeyword_2() { return cBotsKeyword_2; }
	}
	public class ExecuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Execute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecuteCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExecuteCommandExecuteKeyword_0_0 = (Keyword)cExecuteCommandAssignment_0.eContents().get(0);
		private final Keyword cBotsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Execute:
		//    executeCommand = "execute" "bots"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//executeCommand = "execute" "bots"
		public Group getGroup() { return cGroup; }
		
		//executeCommand = "execute"
		public Assignment getExecuteCommandAssignment_0() { return cExecuteCommandAssignment_0; }
		
		//"execute"
		public Keyword getExecuteCommandExecuteKeyword_0_0() { return cExecuteCommandExecuteKeyword_0_0; }
		
		//"bots"
		public Keyword getBotsKeyword_1() { return cBotsKeyword_1; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStopCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStopCommandStopKeyword_0_0 = (Keyword)cStopCommandAssignment_0.eContents().get(0);
		private final Keyword cBotsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Stop:
		//    stopCommand = "stop" "bots"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stopCommand = "stop" "bots"
		public Group getGroup() { return cGroup; }
		
		//stopCommand = "stop"
		public Assignment getStopCommandAssignment_0() { return cStopCommandAssignment_0; }
		
		//"stop"
		public Keyword getStopCommandStopKeyword_0_0() { return cStopCommandStopKeyword_0_0; }
		
		//"bots"
		public Keyword getBotsKeyword_1() { return cBotsKeyword_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValueStringValueParserRuleCall_3_0_0 = (RuleCall)cValueAssignment_3_0.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cValueIntValueParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(value=StringValue | value=RealValue | value=IntValue)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//value=StringValue
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }
		
		//StringValue
		public RuleCall getValueStringValueParserRuleCall_3_0_0() { return cValueStringValueParserRuleCall_3_0_0; }
		
		//value=RealValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_3_1_0() { return cValueRealValueParserRuleCall_3_1_0; }
		
		//value=IntValue
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//IntValue
		public RuleCall getValueIntValueParserRuleCall_3_2_0() { return cValueIntValueParserRuleCall_3_2_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.RealValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealValue:
		//    value=REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//REAL
		public RuleCall getValueREALParserRuleCall_0() { return cValueREALParserRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountAdditionParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LoopStatement:
		//    "loop" count = Addition "times" "do"
		//        statements += Statement+
		//    "end"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"loop" count = Addition "times" "do"
		//    statements += Statement+
		//"end"
		public Group getGroup() { return cGroup; }
		
		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//count = Addition
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//Addition
		public RuleCall getCountAdditionParserRuleCall_1_0() { return cCountAdditionParserRuleCall_1_0; }
		
		//"times"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//statements += Statement+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns NumExpression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns NumExpression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumVarExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary returns NumExpression:
		//    IntValue |
		//    RealValue |
		//    NumVarExpression |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue |
		//RealValue |
		//NumVarExpression |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//RealValue
		public RuleCall getRealValueParserRuleCall_1() { return cRealValueParserRuleCall_1; }
		
		//NumVarExpression
		public RuleCall getNumVarExpressionParserRuleCall_2() { return cNumVarExpressionParserRuleCall_2; }
		
		//"(" Addition ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class NumVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.NumVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//NumVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class StringPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringVarExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringPrimary:
		//    StringVarExpression |
		//    StringValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringVarExpression |
		//StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringVarExpression
		public RuleCall getStringVarExpressionParserRuleCall_0() { return cStringVarExpressionParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
	}
	public class StringVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StringVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//StringVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//    Buy | Sell
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Buy | Sell
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Buy
		public RuleCall getBuyParserRuleCall_0() { return cBuyParserRuleCall_0; }
		
		//Sell
		public RuleCall getSellParserRuleCall_1() { return cSellParserRuleCall_1; }
	}
	public class BuyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Buy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantityAdditionParserRuleCall_1_0 = (RuleCall)cQuantityAssignment_1.eContents().get(0);
		private final Assignment cTickerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTickerIDTerminalRuleCall_2_0 = (RuleCall)cTickerAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPriceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPriceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPriceAdditionParserRuleCall_5_0 = (RuleCall)cPriceAssignment_5.eContents().get(0);
		
		//Buy:
		//    "buy" quantity=Addition ticker=ID "at" "price" price=Addition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"buy" quantity=Addition ticker=ID "at" "price" price=Addition
		public Group getGroup() { return cGroup; }
		
		//"buy"
		public Keyword getBuyKeyword_0() { return cBuyKeyword_0; }
		
		//quantity=Addition
		public Assignment getQuantityAssignment_1() { return cQuantityAssignment_1; }
		
		//Addition
		public RuleCall getQuantityAdditionParserRuleCall_1_0() { return cQuantityAdditionParserRuleCall_1_0; }
		
		//ticker=ID
		public Assignment getTickerAssignment_2() { return cTickerAssignment_2; }
		
		//ID
		public RuleCall getTickerIDTerminalRuleCall_2_0() { return cTickerIDTerminalRuleCall_2_0; }
		
		//"at"
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//"price"
		public Keyword getPriceKeyword_4() { return cPriceKeyword_4; }
		
		//price=Addition
		public Assignment getPriceAssignment_5() { return cPriceAssignment_5; }
		
		//Addition
		public RuleCall getPriceAdditionParserRuleCall_5_0() { return cPriceAdditionParserRuleCall_5_0; }
	}
	public class SellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.Sell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantityAdditionParserRuleCall_1_0 = (RuleCall)cQuantityAssignment_1.eContents().get(0);
		private final Assignment cTickerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTickerIDTerminalRuleCall_2_0 = (RuleCall)cTickerAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPriceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPriceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPriceAdditionParserRuleCall_5_0 = (RuleCall)cPriceAssignment_5.eContents().get(0);
		
		//Sell:
		//    "sell" quantity=Addition ticker=ID "at" "price" price=Addition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"sell" quantity=Addition ticker=ID "at" "price" price=Addition
		public Group getGroup() { return cGroup; }
		
		//"sell"
		public Keyword getSellKeyword_0() { return cSellKeyword_0; }
		
		//quantity=Addition
		public Assignment getQuantityAssignment_1() { return cQuantityAssignment_1; }
		
		//Addition
		public RuleCall getQuantityAdditionParserRuleCall_1_0() { return cQuantityAdditionParserRuleCall_1_0; }
		
		//ticker=ID
		public Assignment getTickerAssignment_2() { return cTickerAssignment_2; }
		
		//ID
		public RuleCall getTickerIDTerminalRuleCall_2_0() { return cTickerIDTerminalRuleCall_2_0; }
		
		//"at"
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//"price"
		public Keyword getPriceKeyword_4() { return cPriceKeyword_4; }
		
		//price=Addition
		public Assignment getPriceAssignment_5() { return cPriceAssignment_5; }
		
		//Addition
		public RuleCall getPriceAdditionParserRuleCall_5_0() { return cPriceAdditionParserRuleCall_5_0; }
	}
	
	public class StrategyDefElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.trader.Trader.StrategyDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBuyAndHoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBuyAndHoldBuyAndHoldKeyword_0_0 = (Keyword)cBuyAndHoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMeanReversionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMeanReversionMeanReversionKeyword_1_0 = (Keyword)cMeanReversionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StrategyDef:
		//    buyAndHold | meanReversion
		//;
		public EnumRule getRule() { return rule; }
		
		//buyAndHold | meanReversion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//buyAndHold
		public EnumLiteralDeclaration getBuyAndHoldEnumLiteralDeclaration_0() { return cBuyAndHoldEnumLiteralDeclaration_0; }
		
		public Keyword getBuyAndHoldBuyAndHoldKeyword_0_0() { return cBuyAndHoldBuyAndHoldKeyword_0_0; }
		
		//meanReversion
		public EnumLiteralDeclaration getMeanReversionEnumLiteralDeclaration_1() { return cMeanReversionEnumLiteralDeclaration_1; }
		
		public Keyword getMeanReversionMeanReversionKeyword_1_0() { return cMeanReversionMeanReversionKeyword_1_0; }
	}
	
	private final TraderProgramElements pTraderProgram;
	private final StatementElements pStatement;
	private final ConnectStatementElements pConnectStatement;
	private final TradingBotElements pTradingBot;
	private final StrategyDefElements eStrategyDef;
	private final ListBotsElements pListBots;
	private final ExecuteElements pExecute;
	private final StopElements pStop;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StringValueElements pStringValue;
	private final RealValueElements pRealValue;
	private final IntValueElements pIntValue;
	private final LoopStatementElements pLoopStatement;
	private final REALElements pREAL;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final NumVarExpressionElements pNumVarExpression;
	private final StringPrimaryElements pStringPrimary;
	private final StringVarExpressionElements pStringVarExpression;
	private final ActionElements pAction;
	private final BuyElements pBuy;
	private final SellElements pSell;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraderGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraderProgram = new TraderProgramElements();
		this.pStatement = new StatementElements();
		this.pConnectStatement = new ConnectStatementElements();
		this.pTradingBot = new TradingBotElements();
		this.eStrategyDef = new StrategyDefElements();
		this.pListBots = new ListBotsElements();
		this.pExecute = new ExecuteElements();
		this.pStop = new StopElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStringValue = new StringValueElements();
		this.pRealValue = new RealValueElements();
		this.pIntValue = new IntValueElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pREAL = new REALElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pNumVarExpression = new NumVarExpressionElements();
		this.pStringPrimary = new StringPrimaryElements();
		this.pStringVarExpression = new StringVarExpressionElements();
		this.pAction = new ActionElements();
		this.pBuy = new BuyElements();
		this.pSell = new SellElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.trader.Trader".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TraderProgram:
	//    statements+=Statement*
	//;
	public TraderProgramElements getTraderProgramAccess() {
		return pTraderProgram;
	}
	
	public ParserRule getTraderProgramRule() {
		return getTraderProgramAccess().getRule();
	}
	
	//Statement:
	//    ConnectStatement | TradingBot | ListBots | Execute | Stop | VariableDeclaration | LoopStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ConnectStatement:
	//    "connect" "to" "broker" brokerName = ID "with"
	//    "username:" username = StringPrimary ","
	//    "password:" password = StringPrimary ","
	//    "leverage:" leverage = Addition ","
	//    "money:" money = Addition ","
	//    "timeframe:" timeframe = StringPrimary
	//;
	public ConnectStatementElements getConnectStatementAccess() {
		return pConnectStatement;
	}
	
	public ParserRule getConnectStatementRule() {
		return getConnectStatementAccess().getRule();
	}
	
	//TradingBot:
	//    "create" "bot" "with" strategy = StrategyDef "strategy" "using" fund = Addition "funds"
	//;
	public TradingBotElements getTradingBotAccess() {
		return pTradingBot;
	}
	
	public ParserRule getTradingBotRule() {
		return getTradingBotAccess().getRule();
	}
	
	//enum StrategyDef:
	//    buyAndHold | meanReversion
	//;
	public StrategyDefElements getStrategyDefAccess() {
		return eStrategyDef;
	}
	
	public EnumRule getStrategyDefRule() {
		return getStrategyDefAccess().getRule();
	}
	
	//ListBots:
	//    listCommand = "see" "registered" "bots"
	//;
	public ListBotsElements getListBotsAccess() {
		return pListBots;
	}
	
	public ParserRule getListBotsRule() {
		return getListBotsAccess().getRule();
	}
	
	//Execute:
	//    executeCommand = "execute" "bots"
	//;
	public ExecuteElements getExecuteAccess() {
		return pExecute;
	}
	
	public ParserRule getExecuteRule() {
		return getExecuteAccess().getRule();
	}
	
	//Stop:
	//    stopCommand = "stop" "bots"
	//;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" (value=StringValue | value=RealValue | value=IntValue)
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING
	//;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//RealValue:
	//    value=REAL
	//;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//IntValue:
	//    value=INT
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//LoopStatement:
	//    "loop" count = Addition "times" "do"
	//        statements += Statement+
	//    "end"
	//;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//Addition returns NumExpression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns NumExpression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns NumExpression:
	//    IntValue |
	//    RealValue |
	//    NumVarExpression |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//NumVarExpression:
	//    var = [VariableDeclaration]
	//;
	public NumVarExpressionElements getNumVarExpressionAccess() {
		return pNumVarExpression;
	}
	
	public ParserRule getNumVarExpressionRule() {
		return getNumVarExpressionAccess().getRule();
	}
	
	//StringPrimary:
	//    StringVarExpression |
	//    StringValue
	//;
	public StringPrimaryElements getStringPrimaryAccess() {
		return pStringPrimary;
	}
	
	public ParserRule getStringPrimaryRule() {
		return getStringPrimaryAccess().getRule();
	}
	
	//StringVarExpression:
	//    var = [VariableDeclaration]
	//;
	public StringVarExpressionElements getStringVarExpressionAccess() {
		return pStringVarExpression;
	}
	
	public ParserRule getStringVarExpressionRule() {
		return getStringVarExpressionAccess().getRule();
	}
	
	//Action:
	//    Buy | Sell
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Buy:
	//    "buy" quantity=Addition ticker=ID "at" "price" price=Addition
	//;
	public BuyElements getBuyAccess() {
		return pBuy;
	}
	
	public ParserRule getBuyRule() {
		return getBuyAccess().getRule();
	}
	
	//Sell:
	//    "sell" quantity=Addition ticker=ID "at" "price" price=Addition
	//;
	public SellElements getSellAccess() {
		return pSell;
	}
	
	public ParserRule getSellRule() {
		return getSellAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
