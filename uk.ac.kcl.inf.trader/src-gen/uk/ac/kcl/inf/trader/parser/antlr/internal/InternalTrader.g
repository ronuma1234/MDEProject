/*
 * generated by Xtext 2.34.0
 */
grammar InternalTrader;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.trader.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.trader.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.trader.services.TraderGrammarAccess;

}

@parser::members {

 	private TraderGrammarAccess grammarAccess;

    public InternalTraderParser(TokenStream input, TraderGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraderProgram";
   	}

   	@Override
   	protected TraderGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraderProgram
entryRuleTraderProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraderProgramRule()); }
	iv_ruleTraderProgram=ruleTraderProgram
	{ $current=$iv_ruleTraderProgram.current; }
	EOF;

// Rule TraderProgram
ruleTraderProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTraderProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTraderProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.trader.Trader.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConnectStatementParserRuleCall_0());
		}
		this_ConnectStatement_0=ruleConnectStatement
		{
			$current = $this_ConnectStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTradingBotParserRuleCall_1());
		}
		this_TradingBot_1=ruleTradingBot
		{
			$current = $this_TradingBot_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getListBotsParserRuleCall_2());
		}
		this_ListBots_2=ruleListBots
		{
			$current = $this_ListBots_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExecuteParserRuleCall_3());
		}
		this_Execute_3=ruleExecute
		{
			$current = $this_Execute_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStopParserRuleCall_4());
		}
		this_Stop_4=ruleStop
		{
			$current = $this_Stop_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_5());
		}
		this_VariableDeclaration_5=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_6());
		}
		this_LoopStatement_6=ruleLoopStatement
		{
			$current = $this_LoopStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConnectStatement
entryRuleConnectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectStatementRule()); }
	iv_ruleConnectStatement=ruleConnectStatement
	{ $current=$iv_ruleConnectStatement.current; }
	EOF;

// Rule ConnectStatement
ruleConnectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='connect'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectStatementAccess().getConnectKeyword_0());
		}
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectStatementAccess().getToKeyword_1());
		}
		otherlv_2='broker'
		{
			newLeafNode(otherlv_2, grammarAccess.getConnectStatementAccess().getBrokerKeyword_2());
		}
		(
			(
				lv_brokerName_3_0=RULE_ID
				{
					newLeafNode(lv_brokerName_3_0, grammarAccess.getConnectStatementAccess().getBrokerNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectStatementRule());
					}
					setWithLastConsumed(
						$current,
						"brokerName",
						lv_brokerName_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getConnectStatementAccess().getWithKeyword_4());
		}
		otherlv_5='username:'
		{
			newLeafNode(otherlv_5, grammarAccess.getConnectStatementAccess().getUsernameKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectStatementAccess().getUsernameStringPrimaryParserRuleCall_6_0());
				}
				lv_username_6_0=ruleStringPrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectStatementRule());
					}
					set(
						$current,
						"username",
						lv_username_6_0,
						"uk.ac.kcl.inf.trader.Trader.StringPrimary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getConnectStatementAccess().getCommaKeyword_7());
		}
		otherlv_8='password:'
		{
			newLeafNode(otherlv_8, grammarAccess.getConnectStatementAccess().getPasswordKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectStatementAccess().getPasswordStringPrimaryParserRuleCall_9_0());
				}
				lv_password_9_0=ruleStringPrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectStatementRule());
					}
					set(
						$current,
						"password",
						lv_password_9_0,
						"uk.ac.kcl.inf.trader.Trader.StringPrimary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=','
		{
			newLeafNode(otherlv_10, grammarAccess.getConnectStatementAccess().getCommaKeyword_10());
		}
		otherlv_11='leverage:'
		{
			newLeafNode(otherlv_11, grammarAccess.getConnectStatementAccess().getLeverageKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectStatementAccess().getLeverageAdditionParserRuleCall_12_0());
				}
				lv_leverage_12_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectStatementRule());
					}
					set(
						$current,
						"leverage",
						lv_leverage_12_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13=','
		{
			newLeafNode(otherlv_13, grammarAccess.getConnectStatementAccess().getCommaKeyword_13());
		}
		otherlv_14='money:'
		{
			newLeafNode(otherlv_14, grammarAccess.getConnectStatementAccess().getMoneyKeyword_14());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectStatementAccess().getMoneyAdditionParserRuleCall_15_0());
				}
				lv_money_15_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectStatementRule());
					}
					set(
						$current,
						"money",
						lv_money_15_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_16=','
		{
			newLeafNode(otherlv_16, grammarAccess.getConnectStatementAccess().getCommaKeyword_16());
		}
		otherlv_17='timeframe:'
		{
			newLeafNode(otherlv_17, grammarAccess.getConnectStatementAccess().getTimeframeKeyword_17());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectStatementAccess().getTimeframeStringPrimaryParserRuleCall_18_0());
				}
				lv_timeframe_18_0=ruleStringPrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectStatementRule());
					}
					set(
						$current,
						"timeframe",
						lv_timeframe_18_0,
						"uk.ac.kcl.inf.trader.Trader.StringPrimary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTradingBot
entryRuleTradingBot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTradingBotRule()); }
	iv_ruleTradingBot=ruleTradingBot
	{ $current=$iv_ruleTradingBot.current; }
	EOF;

// Rule TradingBot
ruleTradingBot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create'
		{
			newLeafNode(otherlv_0, grammarAccess.getTradingBotAccess().getCreateKeyword_0());
		}
		otherlv_1='bot'
		{
			newLeafNode(otherlv_1, grammarAccess.getTradingBotAccess().getBotKeyword_1());
		}
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getTradingBotAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTradingBotAccess().getStrategyStrategyDefEnumRuleCall_3_0());
				}
				lv_strategy_3_0=ruleStrategyDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTradingBotRule());
					}
					set(
						$current,
						"strategy",
						lv_strategy_3_0,
						"uk.ac.kcl.inf.trader.Trader.StrategyDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='strategy'
		{
			newLeafNode(otherlv_4, grammarAccess.getTradingBotAccess().getStrategyKeyword_4());
		}
		otherlv_5='using'
		{
			newLeafNode(otherlv_5, grammarAccess.getTradingBotAccess().getUsingKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTradingBotAccess().getFundAdditionParserRuleCall_6_0());
				}
				lv_fund_6_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTradingBotRule());
					}
					set(
						$current,
						"fund",
						lv_fund_6_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='funds'
		{
			newLeafNode(otherlv_7, grammarAccess.getTradingBotAccess().getFundsKeyword_7());
		}
	)
;

// Entry rule entryRuleListBots
entryRuleListBots returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListBotsRule()); }
	iv_ruleListBots=ruleListBots
	{ $current=$iv_ruleListBots.current; }
	EOF;

// Rule ListBots
ruleListBots returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_listCommand_0_0='see'
				{
					newLeafNode(lv_listCommand_0_0, grammarAccess.getListBotsAccess().getListCommandSeeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListBotsRule());
					}
					setWithLastConsumed($current, "listCommand", lv_listCommand_0_0, "see");
				}
			)
		)
		otherlv_1='registered'
		{
			newLeafNode(otherlv_1, grammarAccess.getListBotsAccess().getRegisteredKeyword_1());
		}
		otherlv_2='bots'
		{
			newLeafNode(otherlv_2, grammarAccess.getListBotsAccess().getBotsKeyword_2());
		}
	)
;

// Entry rule entryRuleExecute
entryRuleExecute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecuteRule()); }
	iv_ruleExecute=ruleExecute
	{ $current=$iv_ruleExecute.current; }
	EOF;

// Rule Execute
ruleExecute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_executeCommand_0_0='execute'
				{
					newLeafNode(lv_executeCommand_0_0, grammarAccess.getExecuteAccess().getExecuteCommandExecuteKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecuteRule());
					}
					setWithLastConsumed($current, "executeCommand", lv_executeCommand_0_0, "execute");
				}
			)
		)
		otherlv_1='bots'
		{
			newLeafNode(otherlv_1, grammarAccess.getExecuteAccess().getBotsKeyword_1());
		}
	)
;

// Entry rule entryRuleStop
entryRuleStop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_ruleStop=ruleStop
	{ $current=$iv_ruleStop.current; }
	EOF;

// Rule Stop
ruleStop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_stopCommand_0_0='stop'
				{
					newLeafNode(lv_stopCommand_0_0, grammarAccess.getStopAccess().getStopCommandStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopRule());
					}
					setWithLastConsumed($current, "stopCommand", lv_stopCommand_0_0, "stop");
				}
			)
		)
		otherlv_1='bots'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopAccess().getBotsKeyword_1());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueStringValueParserRuleCall_3_0_0());
					}
					lv_value_3_0=ruleStringValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"uk.ac.kcl.inf.trader.Trader.StringValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueRealValueParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleRealValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"uk.ac.kcl.inf.trader.Trader.RealValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueIntValueParserRuleCall_3_2_0());
					}
					lv_value_5_0=ruleIntValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"uk.ac.kcl.inf.trader.Trader.IntValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleRealValue
entryRuleRealValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealValueRule()); }
	iv_ruleRealValue=ruleRealValue
	{ $current=$iv_ruleRealValue.current; }
	EOF;

// Rule RealValue
ruleRealValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealValueAccess().getValueREALParserRuleCall_0());
			}
			lv_value_0_0=ruleREAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealValueRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"uk.ac.kcl.inf.trader.Trader.REAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current; }
	EOF;

// Rule IntValue
ruleIntValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	iv_ruleLoopStatement=ruleLoopStatement
	{ $current=$iv_ruleLoopStatement.current; }
	EOF;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopStatementAccess().getLoopKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopStatementAccess().getCountAdditionParserRuleCall_1_0());
				}
				lv_count_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopStatementRule());
					}
					set(
						$current,
						"count",
						lv_count_1_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='times'
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopStatementAccess().getTimesKeyword_2());
		}
		otherlv_3='do'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopStatementAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"uk.ac.kcl.inf.trader.Trader.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getLoopStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.trader.Trader.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.trader.Trader.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntValueParserRuleCall_0());
		}
		this_IntValue_0=ruleIntValue
		{
			$current = $this_IntValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getRealValueParserRuleCall_1());
		}
		this_RealValue_1=ruleRealValue
		{
			$current = $this_RealValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumVarExpressionParserRuleCall_2());
		}
		this_NumVarExpression_2=ruleNumVarExpression
		{
			$current = $this_NumVarExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1());
			}
			this_Addition_4=ruleAddition
			{
				$current = $this_Addition_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleNumVarExpression
entryRuleNumVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumVarExpressionRule()); }
	iv_ruleNumVarExpression=ruleNumVarExpression
	{ $current=$iv_ruleNumVarExpression.current; }
	EOF;

// Rule NumVarExpression
ruleNumVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getNumVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleStringPrimary
entryRuleStringPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringPrimaryRule()); }
	iv_ruleStringPrimary=ruleStringPrimary
	{ $current=$iv_ruleStringPrimary.current; }
	EOF;

// Rule StringPrimary
ruleStringPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringPrimaryAccess().getStringVarExpressionParserRuleCall_0());
		}
		this_StringVarExpression_0=ruleStringVarExpression
		{
			$current = $this_StringVarExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringPrimaryAccess().getStringValueParserRuleCall_1());
		}
		this_StringValue_1=ruleStringValue
		{
			$current = $this_StringValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringVarExpression
entryRuleStringVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringVarExpressionRule()); }
	iv_ruleStringVarExpression=ruleStringVarExpression
	{ $current=$iv_ruleStringVarExpression.current; }
	EOF;

// Rule StringVarExpression
ruleStringVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getStringVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleBuy
entryRuleBuy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuyRule()); }
	iv_ruleBuy=ruleBuy
	{ $current=$iv_ruleBuy.current; }
	EOF;

// Rule Buy
ruleBuy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='buy'
		{
			newLeafNode(otherlv_0, grammarAccess.getBuyAccess().getBuyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBuyAccess().getQuantityAdditionParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBuyRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_ticker_2_0=RULE_ID
				{
					newLeafNode(lv_ticker_2_0, grammarAccess.getBuyAccess().getTickerIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBuyRule());
					}
					setWithLastConsumed(
						$current,
						"ticker",
						lv_ticker_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='at'
		{
			newLeafNode(otherlv_3, grammarAccess.getBuyAccess().getAtKeyword_3());
		}
		otherlv_4='price'
		{
			newLeafNode(otherlv_4, grammarAccess.getBuyAccess().getPriceKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBuyAccess().getPriceAdditionParserRuleCall_5_0());
				}
				lv_price_5_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBuyRule());
					}
					set(
						$current,
						"price",
						lv_price_5_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSell
entryRuleSell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSellRule()); }
	iv_ruleSell=ruleSell
	{ $current=$iv_ruleSell.current; }
	EOF;

// Rule Sell
ruleSell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sell'
		{
			newLeafNode(otherlv_0, grammarAccess.getSellAccess().getSellKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSellAccess().getQuantityAdditionParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSellRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_ticker_2_0=RULE_ID
				{
					newLeafNode(lv_ticker_2_0, grammarAccess.getSellAccess().getTickerIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSellRule());
					}
					setWithLastConsumed(
						$current,
						"ticker",
						lv_ticker_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='at'
		{
			newLeafNode(otherlv_3, grammarAccess.getSellAccess().getAtKeyword_3());
		}
		otherlv_4='price'
		{
			newLeafNode(otherlv_4, grammarAccess.getSellAccess().getPriceKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSellAccess().getPriceAdditionParserRuleCall_5_0());
				}
				lv_price_5_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSellRule());
					}
					set(
						$current,
						"price",
						lv_price_5_0,
						"uk.ac.kcl.inf.trader.Trader.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule StrategyDef
ruleStrategyDef returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='buyAndHold'
			{
				$current = grammarAccess.getStrategyDefAccess().getBuyAndHoldEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStrategyDefAccess().getBuyAndHoldEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='meanReversion'
			{
				$current = grammarAccess.getStrategyDefAccess().getMeanReversionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStrategyDefAccess().getMeanReversionEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
