/*
 * generated by Xtext 2.33.0
 */
grammar InternalTrader;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.trader.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.trader.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.trader.services.TraderGrammarAccess;

}
@parser::members {
	private TraderGrammarAccess grammarAccess;

	public void setGrammarAccess(TraderGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTraderProgram
entryRuleTraderProgram
:
{ before(grammarAccess.getTraderProgramRule()); }
	 ruleTraderProgram
{ after(grammarAccess.getTraderProgramRule()); } 
	 EOF 
;

// Rule TraderProgram
ruleTraderProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraderProgramAccess().getStatementsAssignment()); }
		(rule__TraderProgram__StatementsAssignment)*
		{ after(grammarAccess.getTraderProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnect
entryRuleConnect
:
{ before(grammarAccess.getConnectRule()); }
	 ruleConnect
{ after(grammarAccess.getConnectRule()); } 
	 EOF 
;

// Rule Connect
ruleConnect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectAccess().getGroup()); }
		(rule__Connect__Group__0)
		{ after(grammarAccess.getConnectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnectParameters
entryRuleConnectParameters
:
{ before(grammarAccess.getConnectParametersRule()); }
	 ruleConnectParameters
{ after(grammarAccess.getConnectParametersRule()); } 
	 EOF 
;

// Rule ConnectParameters
ruleConnectParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectParametersAccess().getGroup()); }
		(rule__ConnectParameters__Group__0)
		{ after(grammarAccess.getConnectParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTradingBot
entryRuleTradingBot
:
{ before(grammarAccess.getTradingBotRule()); }
	 ruleTradingBot
{ after(grammarAccess.getTradingBotRule()); } 
	 EOF 
;

// Rule TradingBot
ruleTradingBot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTradingBotAccess().getGroup()); }
		(rule__TradingBot__Group__0)
		{ after(grammarAccess.getTradingBotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExecute
entryRuleExecute
:
{ before(grammarAccess.getExecuteRule()); }
	 ruleExecute
{ after(grammarAccess.getExecuteRule()); } 
	 EOF 
;

// Rule Execute
ruleExecute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExecuteAccess().getGroup()); }
		(rule__Execute__Group__0)
		{ after(grammarAccess.getExecuteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
		(rule__LoopStatement__Group__0)
		{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBuy
entryRuleBuy
:
{ before(grammarAccess.getBuyRule()); }
	 ruleBuy
{ after(grammarAccess.getBuyRule()); } 
	 EOF 
;

// Rule Buy
ruleBuy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuyAccess().getGroup()); }
		(rule__Buy__Group__0)
		{ after(grammarAccess.getBuyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSell
entryRuleSell
:
{ before(grammarAccess.getSellRule()); }
	 ruleSell
{ after(grammarAccess.getSellRule()); } 
	 EOF 
;

// Rule Sell
ruleSell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSellAccess().getGroup()); }
		(rule__Sell__Group__0)
		{ after(grammarAccess.getSellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule StrategyDef
ruleStrategyDef
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyDefAccess().getAlternatives()); }
		(rule__StrategyDef__Alternatives)
		{ after(grammarAccess.getStrategyDefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getConnectParserRuleCall_0()); }
		ruleConnect
		{ after(grammarAccess.getStatementAccess().getConnectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTradingBotParserRuleCall_1()); }
		ruleTradingBot
		{ after(grammarAccess.getStatementAccess().getTradingBotParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExecuteParserRuleCall_2()); }
		ruleExecute
		{ after(grammarAccess.getStatementAccess().getExecuteParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_3()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_4()); }
		ruleLoopStatement
		{ after(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrategyDef__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyDefAccess().getBuyAndHoldEnumLiteralDeclaration_0()); }
		('buyAndHold')
		{ after(grammarAccess.getStrategyDefAccess().getBuyAndHoldEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrategyDefAccess().getMeanReversionEnumLiteralDeclaration_1()); }
		('meanReversion')
		{ after(grammarAccess.getStrategyDefAccess().getMeanReversionEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__0__Impl
	rule__Connect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getConnectKeyword_0()); }
	'connect'
	{ after(grammarAccess.getConnectAccess().getConnectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__1__Impl
	rule__Connect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getBrokerKeyword_1()); }
	'broker'
	{ after(grammarAccess.getConnectAccess().getBrokerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__2__Impl
	rule__Connect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getBrokerNameAssignment_2()); }
	(rule__Connect__BrokerNameAssignment_2)
	{ after(grammarAccess.getConnectAccess().getBrokerNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getGroup_3()); }
	(rule__Connect__Group_3__0)?
	{ after(grammarAccess.getConnectAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connect__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_3__0__Impl
	rule__Connect__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getConnectAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getParametersAssignment_3_1()); }
	(rule__Connect__ParametersAssignment_3_1)
	{ after(grammarAccess.getConnectAccess().getParametersAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConnectParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__0__Impl
	rule__ConnectParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getUsernameKeyword_0()); }
	'username'
	{ after(grammarAccess.getConnectParametersAccess().getUsernameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__1__Impl
	rule__ConnectParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__2__Impl
	rule__ConnectParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getUsernameAssignment_2()); }
	(rule__ConnectParameters__UsernameAssignment_2)
	{ after(grammarAccess.getConnectParametersAccess().getUsernameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__3__Impl
	rule__ConnectParameters__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getConnectParametersAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__4__Impl
	rule__ConnectParameters__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getPasswordKeyword_4()); }
	'password'
	{ after(grammarAccess.getConnectParametersAccess().getPasswordKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__5__Impl
	rule__ConnectParameters__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_5()); }
	'='
	{ after(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__6__Impl
	rule__ConnectParameters__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getPasswordAssignment_6()); }
	(rule__ConnectParameters__PasswordAssignment_6)
	{ after(grammarAccess.getConnectParametersAccess().getPasswordAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__7__Impl
	rule__ConnectParameters__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getCommaKeyword_7()); }
	','
	{ after(grammarAccess.getConnectParametersAccess().getCommaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__8__Impl
	rule__ConnectParameters__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getLeverageKeyword_8()); }
	'leverage'
	{ after(grammarAccess.getConnectParametersAccess().getLeverageKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__9__Impl
	rule__ConnectParameters__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_9()); }
	'='
	{ after(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__10__Impl
	rule__ConnectParameters__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getLeverageAssignment_10()); }
	(rule__ConnectParameters__LeverageAssignment_10)
	{ after(grammarAccess.getConnectParametersAccess().getLeverageAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__11__Impl
	rule__ConnectParameters__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getCommaKeyword_11()); }
	','
	{ after(grammarAccess.getConnectParametersAccess().getCommaKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__12__Impl
	rule__ConnectParameters__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getMoneyKeyword_12()); }
	'money'
	{ after(grammarAccess.getConnectParametersAccess().getMoneyKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__13__Impl
	rule__ConnectParameters__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_13()); }
	'='
	{ after(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__14__Impl
	rule__ConnectParameters__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getMoneyAssignment_14()); }
	(rule__ConnectParameters__MoneyAssignment_14)
	{ after(grammarAccess.getConnectParametersAccess().getMoneyAssignment_14()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__15
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__15__Impl
	rule__ConnectParameters__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__15__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getCommaKeyword_15()); }
	','
	{ after(grammarAccess.getConnectParametersAccess().getCommaKeyword_15()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__16
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__16__Impl
	rule__ConnectParameters__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__16__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getTimeframeKeyword_16()); }
	'timeframe'
	{ after(grammarAccess.getConnectParametersAccess().getTimeframeKeyword_16()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__17
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__17__Impl
	rule__ConnectParameters__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__17__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_17()); }
	'='
	{ after(grammarAccess.getConnectParametersAccess().getEqualsSignKeyword_17()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__18
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectParameters__Group__18__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__Group__18__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectParametersAccess().getTimeframeAssignment_18()); }
	(rule__ConnectParameters__TimeframeAssignment_18)
	{ after(grammarAccess.getConnectParametersAccess().getTimeframeAssignment_18()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TradingBot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__0__Impl
	rule__TradingBot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getTradingBotKeyword_0()); }
	'tradingBot'
	{ after(grammarAccess.getTradingBotAccess().getTradingBotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__1__Impl
	rule__TradingBot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getStrategyKeyword_1()); }
	'strategy'
	{ after(grammarAccess.getTradingBotAccess().getStrategyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__2__Impl
	rule__TradingBot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getTradingBotAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__3__Impl
	rule__TradingBot__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getStrategyAssignment_3()); }
	(rule__TradingBot__StrategyAssignment_3)
	{ after(grammarAccess.getTradingBotAccess().getStrategyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__4__Impl
	rule__TradingBot__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getTradingBotAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__5__Impl
	rule__TradingBot__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getFundsKeyword_5()); }
	'funds'
	{ after(grammarAccess.getTradingBotAccess().getFundsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__6__Impl
	rule__TradingBot__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getEqualsSignKeyword_6()); }
	'='
	{ after(grammarAccess.getTradingBotAccess().getEqualsSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TradingBot__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTradingBotAccess().getFundsAssignment_7()); }
	(rule__TradingBot__FundsAssignment_7)
	{ after(grammarAccess.getTradingBotAccess().getFundsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Execute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group__0__Impl
	rule__Execute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getExecuteKeyword_0()); }
	'execute'
	{ after(grammarAccess.getExecuteAccess().getExecuteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group__1__Impl
	rule__Execute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getBotsKeyword_1()); }
	'bots'
	{ after(grammarAccess.getExecuteAccess().getBotsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group__2__Impl
	rule__Execute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getBotsAssignment_2()); }
	(rule__Execute__BotsAssignment_2)
	{ after(grammarAccess.getExecuteAccess().getBotsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getGroup_3()); }
	(rule__Execute__Group_3__0)*
	{ after(grammarAccess.getExecuteAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Execute__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group_3__0__Impl
	rule__Execute__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getExecuteAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getBotsAssignment_3_1()); }
	(rule__Execute__BotsAssignment_3_1)
	{ after(grammarAccess.getExecuteAccess().getBotsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getCountAssignment_0()); }
	(rule__LoopStatement__CountAssignment_0)
	{ after(grammarAccess.getLoopStatementAccess().getCountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getTimesKeyword_1()); }
	'times'
	{ after(grammarAccess.getLoopStatementAccess().getTimesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getLoopStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__3__Impl
	rule__LoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
		(rule__LoopStatement__StatementsAssignment_3)
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
		(rule__LoopStatement__StatementsAssignment_3)*
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getLoopStatementAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Buy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__0__Impl
	rule__Buy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getBuyKeyword_0()); }
	'buy'
	{ after(grammarAccess.getBuyAccess().getBuyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__1__Impl
	rule__Buy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getQuantityAssignment_1()); }
	(rule__Buy__QuantityAssignment_1)
	{ after(grammarAccess.getBuyAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__2__Impl
	rule__Buy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getTickerAssignment_2()); }
	(rule__Buy__TickerAssignment_2)
	{ after(grammarAccess.getBuyAccess().getTickerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__3__Impl
	rule__Buy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getAtKeyword_3()); }
	'at'
	{ after(grammarAccess.getBuyAccess().getAtKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__4__Impl
	rule__Buy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getPriceKeyword_4()); }
	'price'
	{ after(grammarAccess.getBuyAccess().getPriceKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Buy__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuyAccess().getPriceAssignment_5()); }
	(rule__Buy__PriceAssignment_5)
	{ after(grammarAccess.getBuyAccess().getPriceAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__0__Impl
	rule__Sell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getSellKeyword_0()); }
	'sell'
	{ after(grammarAccess.getSellAccess().getSellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__1__Impl
	rule__Sell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getQuantityAssignment_1()); }
	(rule__Sell__QuantityAssignment_1)
	{ after(grammarAccess.getSellAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__2__Impl
	rule__Sell__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getTickerAssignment_2()); }
	(rule__Sell__TickerAssignment_2)
	{ after(grammarAccess.getSellAccess().getTickerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__3__Impl
	rule__Sell__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getAtKeyword_3()); }
	'at'
	{ after(grammarAccess.getSellAccess().getAtKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__4__Impl
	rule__Sell__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getPriceKeyword_4()); }
	'price'
	{ after(grammarAccess.getSellAccess().getPriceKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sell__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSellAccess().getPriceAssignment_5()); }
	(rule__Sell__PriceAssignment_5)
	{ after(grammarAccess.getSellAccess().getPriceAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraderProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraderProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getTraderProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__BrokerNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getBrokerNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getConnectAccess().getBrokerNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__ParametersAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getParametersConnectParametersParserRuleCall_3_1_0()); }
		ruleConnectParameters
		{ after(grammarAccess.getConnectAccess().getParametersConnectParametersParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__UsernameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectParametersAccess().getUsernameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getConnectParametersAccess().getUsernameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__PasswordAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectParametersAccess().getPasswordSTRINGTerminalRuleCall_6_0()); }
		RULE_STRING
		{ after(grammarAccess.getConnectParametersAccess().getPasswordSTRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__LeverageAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectParametersAccess().getLeverageREALParserRuleCall_10_0()); }
		ruleREAL
		{ after(grammarAccess.getConnectParametersAccess().getLeverageREALParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__MoneyAssignment_14
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectParametersAccess().getMoneyREALParserRuleCall_14_0()); }
		ruleREAL
		{ after(grammarAccess.getConnectParametersAccess().getMoneyREALParserRuleCall_14_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectParameters__TimeframeAssignment_18
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectParametersAccess().getTimeframeSTRINGTerminalRuleCall_18_0()); }
		RULE_STRING
		{ after(grammarAccess.getConnectParametersAccess().getTimeframeSTRINGTerminalRuleCall_18_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__StrategyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTradingBotAccess().getStrategyStrategyDefEnumRuleCall_3_0()); }
		ruleStrategyDef
		{ after(grammarAccess.getTradingBotAccess().getStrategyStrategyDefEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TradingBot__FundsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTradingBotAccess().getFundsREALParserRuleCall_7_0()); }
		ruleREAL
		{ after(grammarAccess.getTradingBotAccess().getFundsREALParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__BotsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecuteAccess().getBotsTradingBotCrossReference_2_0()); }
		(
			{ before(grammarAccess.getExecuteAccess().getBotsTradingBotIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExecuteAccess().getBotsTradingBotIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getExecuteAccess().getBotsTradingBotCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__BotsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecuteAccess().getBotsTradingBotCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getExecuteAccess().getBotsTradingBotIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExecuteAccess().getBotsTradingBotIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getExecuteAccess().getBotsTradingBotCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__CountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getCountAdditionParserRuleCall_0_0()); }
		ruleAddition
		{ after(grammarAccess.getLoopStatementAccess().getCountAdditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuyAccess().getQuantityREALParserRuleCall_1_0()); }
		ruleREAL
		{ after(grammarAccess.getBuyAccess().getQuantityREALParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__TickerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuyAccess().getTickerIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getBuyAccess().getTickerIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Buy__PriceAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuyAccess().getPriceREALParserRuleCall_5_0()); }
		ruleREAL
		{ after(grammarAccess.getBuyAccess().getPriceREALParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSellAccess().getQuantityREALParserRuleCall_1_0()); }
		ruleREAL
		{ after(grammarAccess.getSellAccess().getQuantityREALParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__TickerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSellAccess().getTickerIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSellAccess().getTickerIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sell__PriceAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSellAccess().getPriceREALParserRuleCall_5_0()); }
		ruleREAL
		{ after(grammarAccess.getSellAccess().getPriceREALParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
